// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------
package Tema2_ISP_CTD;

import java.util.*; 
import java.lang.*; 
/************************************************************/
/**
 **
 */
public class DispVerificare extends Date_Rovinieta {
	/**
	 * 
	 */
	private int nrRoviniete;
	/**
	 * 
	 */
	private Rovinieta[] rovinieta;
	
	private HashMap<String, Integer> distante = new HashMap<String, Integer>();
	
	/**
	 * Camp prin care disp de verificare comunica cu camera
	 */
	
	Evidenta evidenta;
	
	CanalComunicatie canal = new CanalComunicatie();
	
	/**
	 * In acest string se va pastra numarul de inmatriculare returnat de canal
	 */
	String date;
	
	public DispVerificare() {
		nrRoviniete =0;
		rovinieta =null;
		evidenta =new Evidenta();
		distanteDefault();
	}
	
	public DispVerificare(CanalComunicatie can)
	{
		this.canal = can;
		distanteDefault();
	}
	
	public DispVerificare(Rovinieta[] roviniete, int lungime) {
		nrRoviniete = lungime;
		if(roviniete != null) {
			for(int i=0; i<nrRoviniete; ++i)
				rovinieta[i] = roviniete[i];
		}
		evidenta =new Evidenta();
		distanteDefault();
	}
	
	public DispVerificare(Rovinieta[] roviniete, int lungime, CanalComunicatie can) {
		nrRoviniete = lungime;
		if(roviniete != null) {
			for(int i=0; i<nrRoviniete; ++i)
				rovinieta[i] = roviniete[i];
		}
		evidenta =new Evidenta();
		distanteDefault();
		this.canal = can;
	}
	
	public void distanteDefault() {
		distante.put("Bucuresti", 30); 
		distante.put("Ploiesti", 15); 
		distante.put("Constanta", 25); 
		distante.put("Bld 1 Mai", 70); 
		distante.put("Bld Stefan cel Mare", 56); 
	}
	
	/**
	 * Getteri si Setteri
	 */
	public Rovinieta getRovinieta(int i) 
	{
		return rovinieta[i];
	}
	
	public Rovinieta[] getRovinieta()
	{
		return rovinieta;
	}

	public void setRovinieta(Rovinieta[] rovinieta, int lungime) 
	{
		rovinieta = new Rovinieta[lungime];
		nrRoviniete =0;
		
		for(int i=0; i < lungime; ++i) {
			this.rovinieta[i] = rovinieta[i];
			nrRoviniete = nrRoviniete +1;
		}
	}
	
	public int getNrRoviniete() {
		return nrRoviniete;
	}
	
	public Evidenta getEvidenta() {
		return evidenta;
	}
	
	public void setEvidenta(Evidenta evid) {
		
		int nr = evid.getNrRoviniete();
		evidenta.setNrRoviniete(nr);
		for(int i=0; i<nr; ++i) {
			Rovinieta temp = evid.getRovinieta(i);
			evidenta.setRovinieta(temp, i);
		}
	}
	
	public HashMap<String, Integer> getDistante(){
		return distante;
	}

	public void setDistante(HashMap<String, Integer> dist) {
		distante.putAll(dist);
	}
	
	public void setCanal(CanalComunicatie can) {
		canal = can;
	}
	
	public CanalComunicatie getCanal() {
		return canal;
	}
	
	
	/**
	 * 
	 */
	public void verificareProximitatePolitie() {
		HashMap<String, Integer> dist= new HashMap<String, Integer>();
		dist.putAll(distante);
		distante = sortByValue(dist);
		Map.Entry<String,Integer> entry = distante.entrySet().iterator().next();
		String key = entry.getKey();
		Integer value = entry.getValue();
		
		alertarePolitie(key, value);
	}
	
	/**
	 * 
	 */
	public HashMap<String, Integer> sortByValue(HashMap<String, Integer> dist) {
		// Create a list from elements of HashMap 
        List<Map.Entry<String, Integer> > list = 
               new LinkedList<Map.Entry<String, Integer> >(dist.entrySet()); 
  
        // Sort the list 
        Collections.sort(list, new Comparator<Map.Entry<String, Integer> >() { 
            public int compare(Map.Entry<String, Integer> o1,  
                               Map.Entry<String, Integer> o2) 
            { 
                return (o1.getValue()).compareTo(o2.getValue()); 
            } 
        }); 
        
        HashMap<String, Integer> temp = new LinkedHashMap<String, Integer>(); 
        for (Map.Entry<String, Integer> aa : list) { 
            temp.put(aa.getKey(), aa.getValue()); 
        } 
        
        return temp;
	}
	
	
	/**
	 * 
	 */
	public boolean preluareDateRovinieta(String nrInmatriculare) {
		String serieSasiu = "";
		if(evidenta.rovinietaExista(nrInmatriculare, "inmatr")) 
			if(evidenta.getSerieSasiu(nrInmatriculare) != "nimic") {
				serieSasiu = evidenta.getSerieSasiu(nrInmatriculare);
				return true;
			}
			
		verificareRovinieta(nrInmatriculare, serieSasiu);
		return false;
	}
	
	@Override
	public int verificareRovinieta(String nrInmatriculare, String serieSasiu) {
		
		Rovinieta temp = new Rovinieta(nrInmatriculare, serieSasiu);
		if(evidenta.rovinietaExista(serieSasiu, "sasiu")) {
			if(evidenta.rovinietaExpirata(serieSasiu) == false) {
				this.adaugaRovinieta(temp);
				verificareDate(true);
				return 1;
			} else {
				System.out.println("Rovinieta expirata! Inceperea procesului de alertare politie!");
				verificareProximitatePolitie();
				verificareDate(false);
				return 2;}
		} 
		verificareProximitatePolitie();
		System.out.println("Rovinieta incorecta! Inceperea procesului de alertare politie!");
		verificareDate(false);
		return 3;
	}
	
	public boolean verificareDate(boolean temp) {
		return temp;
	}
	
	public boolean alertarePolitie(String departament, int distanta) {
		if(distanta > 0) {
			System.out.println("Statia de politie " + departament + "a fost alertata!");
			System.out.println("Aceasta se afla la distanta de " + distanta + "de locatia acestui dispozitiv.");
			
			Organ_politie politist = new Organ_politie();
			politist.primireSemnal(departament);
			return true;
		}
		return false;
	}
	
	/**
	 * Verific daca dispozitivul s a conectat la canalul de comunicatie
	 */
	public boolean verificareConnectareDispozitiv() {
		if(this.canal != null ) {
			System.out.println("Conectare reusita");
			return true;
		}
		System.out.println("Eroare de conectare a Dispozitivului de Verificare la Canal");
		return false;
	}
	
	/**
	 * Se salveaza in Stringul date informatiile de pe canalul de comunicatie
	 */
	public boolean acceptareDate () {
		if(this.canal != null) {
			this.date = canal.transmitereDate();
			if(date != null || date != "") {
				System.out.println(this.date);
				this.preluareDateRovinieta(date);
				return true;
			}
			return false;
		}
		return false;	
	}
	
	public boolean adaugaRovinieta(Rovinieta rovinieta) 
	{
		
		if(nrRoviniete > 1) {
			
			nrRoviniete = nrRoviniete +1; 
			Rovinieta temp[] = new Rovinieta[nrRoviniete]; 
			
			for(int i=0; i<nrRoviniete-1; ++i)
				temp[i] = this.rovinieta[i];
			
			temp[nrRoviniete-1] = rovinieta;
			
			this.rovinieta = new Rovinieta[nrRoviniete];
			
			for(int i=0; i<nrRoviniete; ++i)
				this.rovinieta[i] = temp[i];
			return true;
		} 
		else if(nrRoviniete == 1)
		{
			nrRoviniete = nrRoviniete +1;
			Rovinieta temp = this.rovinieta[nrRoviniete-2];
			
			this.rovinieta = new Rovinieta[nrRoviniete]; //marit spatiul la 2
			this.rovinieta[nrRoviniete -2] = temp;       // pe 0 punem temp
			this.rovinieta[nrRoviniete -1] = rovinieta;  // pe 1 punem rovinieta pe care o vrem
			return true;
		} 
		else if(nrRoviniete == 0){
			nrRoviniete = nrRoviniete +1;
			this.rovinieta = new Rovinieta[nrRoviniete]; //aloc 1 spatiu
			this.rovinieta[nrRoviniete-1] = rovinieta;   // pun pe pozitia 1-1=0 pe rovinieta
			return true;
		} 
		else return false;
		
	}
	
	public boolean scoateRovinieta(Rovinieta rovinieta) {
		boolean ok=false;
		for(int i=0; i<nrRoviniete; ++i) {
			if(ok) {
				this.rovinieta[i-1] = this.rovinieta[i];
			}
			if(this.rovinieta[i] == rovinieta)
				ok=true;
		}
		if(ok) {
			nrRoviniete = nrRoviniete -1;
			return true;
		}
		else return false;
	}
	
	public boolean scoateRovinieta(int numar) {
		if(numar < nrRoviniete) {
			for(int i=numar+1; i<nrRoviniete; ++i) {
				this.rovinieta[i-1] = this.rovinieta[i];
			}
			return true;
		}
		else return false;
	}
	
	/**
	 * 
	 */
	public void listaRoviniete() {
		
		if(nrRoviniete == 0)
	 		return;
		
		for(int i=0; i<nrRoviniete; ++i)
			rovinieta[i].afisareDate();
	}
	
};
